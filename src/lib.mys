from string import StringReader

class GraphqlError(Error):
    message: string

trait _Token:
    pass

class _Punctuator(_Token):
    value: char

class _Dots(_Token):
    pass

class _Name(_Token):
    value: string

class _IntValue(_Token):
    value: string

class _FloatValue(_Token):
    value: string

class _StringValue(_Token):
    value: string

class _End(_Token):
    pass

class _Tokens:
    _tokens: [_Token]
    _pos: u64

    func __init__(self, tokens: [_Token]):
        self._tokens = tokens
        self._pos = 0

    func available(self) -> bool:
        return self._pos < len(self._tokens)

    func get(self) -> _Token:
        if not self.available():
            raise GraphqlError("Out of tokens.")

        self._pos += 1

        return self._tokens[self._pos - 1]

    func peek(self) -> _Token:
        if not self.available():
            raise GraphqlError("Out of tokens.")

        return self._tokens[self._pos]

    func unget(self):
        self._pos -= 1

class Document:
    definitions: [Definition]

class Definition:
    executable_definition: ExecutableDefinition

class ExecutableDefinition:
    operation_definition: OperationDefinition

class OperationDefinition:
    operation_type: string
    name: string
    variable_definitions: [VariableDefinition]
    selections: [Selection]

class VariableDefinition:
    name: string
    value: Type

class Type:
    name: string
    types: [Type]
    non_null: bool

class Selection:
    field: Field

class Field:
    name: string
    arguments: [Argument]
    selections: [Selection]

class Argument:
    name: string
    value: string
    variable: string

func _tokenize_name(reader: StringReader) -> _Token:
    name = ""

    while True:
        ch = reader.get()

        if ch.is_alpha() or ch.is_digit() or ch == '_':
            name += ch
        else:
            if ch != '':
                reader.unget()

            break

    return _Name(name)

func _tokenize_number(reader: StringReader) -> _Token:
    value = ""

    while True:
        ch = reader.get()

        if ch.is_digit():
            value += ch
        else:
            if ch != '':
                reader.unget()

            break

    return _IntValue(value)

func _tokenize_dots(reader: StringReader) -> _Token:
    for _ in range(3):
        ch = reader.get()

        if ch != '.':
            raise GraphqlError("No '.'.")

    return _Dots()

func _tokenize_string(reader: StringReader) -> _Token:
    value = ""

    while True:
        ch = reader.get()

        if ch == '\"':
            break
        elif ch == '':
            raise GraphqlError("No end of string.")
        else:
            value += ch

    return _StringValue(value)

func _tokenize(document: string) -> _Tokens:
    reader = StringReader(document)
    token: _Token = None
    tokens: [_Token] = []

    while True:
        ch = reader.get()

        if ch in ",\t\r\n ":
            continue
        elif ch in "!$&():=@[]{|}":
            token = _Punctuator(ch)
        elif ch == '.':
            reader.unget()
            token = _tokenize_dots(reader)
        elif ch == '-' or ch.is_digit():
            reader.unget()
            token = _tokenize_number(reader)
        elif ch == '\"':
            token = _tokenize_string(reader)
        elif ch.is_alpha() or ch == '_':
            reader.unget()
            token = _tokenize_name(reader)
        elif ch == '':
            break
        else:
            raise GraphqlError(f"Invalid character '{ch}'")

        tokens.append(token)

    # tokens.append(_End())

    return _Tokens(tokens)

func _parse_arguments(tokens: _Tokens) -> [Argument]:
    match tokens.peek():
        case _Punctuator(value='('):
            pass
        case _:
            return None

    tokens.get()
    arguments = []

    while True:
        match tokens.get():
            case _Name() as name_token:
                _parse_colon(tokens)

                value: string = None
                variable: string = None

                match tokens.get():
                    case _StringValue() as string_value_token:
                        value = string_value_token.value
                    case _IntValue() as int_value_token:
                        pass
                    case _Punctuator(value='$'):
                        variable = _parse_variable(tokens)
                    case _:
                        raise GraphqlError("No value.")

                arguments.append(Argument(name_token.value, value, variable))
            case _Punctuator(value=')'):
                break
            case _:
                raise GraphqlError("No ).")

    return arguments

func _parse_name(tokens: _Tokens) -> string:
    match tokens.get():
        case _Name() as name_token:
            return name_token.value
        case _:
            tokens.unget()

            return None

func _parse_field(tokens: _Tokens) -> Field:
    name = _parse_name(tokens)

    if name is None:
        return None

    arguments = _parse_arguments(tokens)
    selections = _parse_selection_set(tokens)

    return Field(name, arguments, selections)

func _parse_selection(tokens: _Tokens) -> Selection:
    field = _parse_field(tokens)

    if field is None:
        return None

    return Selection(field)

func _parse_selection_set(tokens: _Tokens) -> [Selection]:
    selections: [Selection] = []

    match tokens.peek():
        case _Punctuator(value='{'):
            pass
        case _:
            return None

    tokens.get()

    while True:
        match tokens.peek():
            case _Punctuator(value='}'):
                break

        selection = _parse_selection(tokens)

        if selection is None:
            return None

        selections.append(selection)

    tokens.get()

    return selections

func _parse_operation_type(tokens: _Tokens) -> string:
    operation_type = _parse_name(tokens)

    if operation_type is None:
        return None

    if operation_type not in ["query", "mutation", "subscription"]:
        raise GraphqlError(f"Bad operation '{operation_type}'.")

    return operation_type

func _parse_non_null(tokens: _Tokens) -> bool:
    match tokens.get():
        case _Punctuator(value='!'):
            return True
        case _:
            tokens.unget()

            return False


func _parse_type(tokens: _Tokens) -> Type:
    match tokens.get():
        case _Name() as name_token:
            non_null = _parse_non_null(tokens)

            return Type(name_token.value, None, non_null)
        case _:
            raise GraphqlError("No type name.")

func _parse_variable(tokens: _Tokens) -> string:
    match tokens.get():
        case _Name() as name_token:
            return name_token.value
        case _:
            raise GraphqlError("No variable name.")

func _parse_colon(tokens: _Tokens):
    match tokens.get():
        case _Punctuator(value=':'):
            pass
        case _:
            raise GraphqlError("No :.")

func _parse_variable_definitions(tokens: _Tokens) -> [VariableDefinition]:
    match tokens.peek():
        case _Punctuator(value='('):
            pass
        case _:
            return None

    tokens.get()
    variable_definitions = []

    while True:
        match tokens.get():
            case _Punctuator(value='$'):
                name = _parse_variable(tokens)
                _parse_colon(tokens)
                type = _parse_type(tokens)

                if type is None:
                    raise GraphqlError("No type.")

                variable_definitions.append(VariableDefinition(name, type))
            case _Punctuator(value=')'):
                break
            case _:
                raise GraphqlError("No ).")

    return variable_definitions

func _parse_operation_definition(tokens: _Tokens) -> OperationDefinition:
    name: string = None
    variable_definitions: [VariableDefinition] = None
    operation_type = _parse_operation_type(tokens)

    if operation_type is not None:
        name = _parse_name(tokens)

        if name is not None:
            variable_definitions = _parse_variable_definitions(tokens)

    selections = _parse_selection_set(tokens)

    if selections is None:
        return None

    return OperationDefinition(operation_type,
                               name,
                               variable_definitions,
                               selections)

func _parse_executable_definition(tokens: _Tokens) -> ExecutableDefinition:
    operation_definition = _parse_operation_definition(tokens)

    if operation_definition is None:
        return None

    return ExecutableDefinition(operation_definition)

func _parse_definition(tokens: _Tokens) -> Definition:
    executable_definition = _parse_executable_definition(tokens)

    if executable_definition is None:
        return None

    return Definition(executable_definition)

func _parse_document(tokens: _Tokens) -> Document:
    document = Document([])

    while tokens.available():
        definition = _parse_definition(tokens)

        if definition is None:
            raise GraphqlError("Bad definition.")

        document.definitions.append(definition)

    return document

func parse(document: string) -> Document:
    """Parse given document.

    """

    tokens = _tokenize(document)

    return _parse_document(tokens)

@test
func test_parse_query():
    document = parse("\t\r"
                     "{\n"
                     "  foo(id: 10, name: \"kalle\") {\n"
                     "    id\n"
                     "    name\n"
                     "    value\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    selection = selections[0]
    assert selection.field.name == "foo"
    arguments = selection.field.arguments
    assert len(arguments) == 2
    assert arguments[0].name == "id"
    assert arguments[1].name == "name"
    selections = selection.field.selections
    assert len(selections) == 3
    assert selections[0].field.name == "id"
    assert selections[0].field.arguments is None
    assert selections[0].field.selections is None
    assert selections[1].field.name == "name"
    assert selections[1].field.arguments is None
    assert selections[1].field.selections is None
    assert selections[2].field.name == "value"
    assert selections[2].field.arguments is None
    assert selections[2].field.selections is None

@test
func test_spacex():
    document = parse("{"
                     "  launchesPast(limit: 10) {"
                     "    mission_name"
                     "    launch_date_local"
                     "    launch_site {"
                     "      site_name_long"
                     "    }"
                     "    ships {"
                     "      name"
                     "      home_port"
                     "      image"
                     "    }"
                     "  }"
                     "}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    assert selections[0].field.name == "launchesPast"
    selections = selections[0].field.selections
    assert selections[0].field.name == "mission_name"
    assert selections[1].field.name == "launch_date_local"
    assert selections[2].field.name == "launch_site"
    assert selections[2].field.selections[0].field.name == "site_name_long"
    assert selections[3].field.name == "ships"
    assert selections[3].field.selections[0].field.name == "name"
    assert selections[3].field.selections[1].field.name == "home_port"
    assert selections[3].field.selections[2].field.name == "image"

@test
func test_bad_definition():
    try:
        parse("{{name}}")
        assert False
    except GraphqlError as error:
        assert error.message == "Bad definition."

    try:
        parse("{")
        assert False
    except GraphqlError as error:
        assert error.message == "Out of tokens."

@test
func test_name():
    document = parse("{foo_2}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    assert selections[0].field.name == "foo_2"

@test
func test_operation_type():
    document = parse("query {\n"
                     "  packages {\n"
                     "    name\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert operation_definition.operation_type == "query"
    assert operation_definition.name is None

@test
func test_operation_type_with_name():
    document = parse("query MyQuery {\n"
                     "  packages {\n"
                     "    name\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert operation_definition.operation_type == "query"
    assert operation_definition.name == "MyQuery"

@test
func test_variable():
    document = parse("query ExampleQuery($name: String!) {\n"
                     "  standard_library {\n"
                     "    package(name: $name) {\n"
                     "      name\n"
                     "    }\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert len(operation_definition.variable_definitions) == 1
    print(operation_definition.variable_definitions[0])
    assert operation_definition.variable_definitions[0].name == "name"
    assert operation_definition.variable_definitions[0].value.name == "String"
    assert operation_definition.variable_definitions[0].value.non_null

    document = parse("query ExampleQuery($count: Int) {\n"
                     "  standard_library {\n"
                     "    package(count: $count) {\n"
                     "      name\n"
                     "    }\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert len(operation_definition.variable_definitions) == 1
    print(operation_definition.variable_definitions[0])
    assert operation_definition.variable_definitions[0].name == "count"
    assert operation_definition.variable_definitions[0].value.name == "Int"
    assert not operation_definition.variable_definitions[0].value.non_null

@test
func test_parse_schema():
    return
    parse("type Query {"
          "  standard_library: StandardLibrary!"
          "  statistics: Statistics!"
          "}"
          "type StandardLibrary {"
          "  package(name: String!): Package!"
          "  packages: [String!]"
          "}"
          "type Package {"
          "  name: String!"
          "  latest_release: Release!"
          "  number_of_downloads: Int!"
          "  builds: Boolean"
          "}"
          "type Release {"
          "  version: String!"
          "  description: String!"
          "}"
          "type Statistics {"
          "  start_date_time: String!"
          "  total_number_of_requests: Int!"
          "  number_of_unique_visitors: Int!"
          "  number_of_graphql_requests: Int!"
          "  no_idle_client_handlers: Int!"
          "}")
