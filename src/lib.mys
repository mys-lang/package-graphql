from string import StringReader

class GraphqlError(Error):
    message: string

@trait
class _Token:
    pass

class _Punctuator(_Token):
    value: char

class _Dots(_Token):
    pass

class _Name(_Token):
    value: string

class _IntValue(_Token):
    value: string

class _FloatValue(_Token):
    value: string

class _StringValue(_Token):
    value: string

class _End(_Token):
    pass

class _Tokens:
    _tokens: [_Token]
    _pos: u64

    func __init__(self, tokens: [_Token]):
        self._tokens = tokens
        self._pos = 0

    func available(self) -> bool:
        return self._pos < len(self._tokens)

    func get(self) -> _Token:
        if not self.available():
            raise GraphqlError("Out of tokens.")

        self._pos += 1

        return self._tokens[self._pos - 1]

    func peek(self) -> _Token:
        if not self.available():
            raise GraphqlError("Out of tokens.")

        return self._tokens[self._pos]

    func unget(self):
        self._pos -= 1

class Document:
    definitions: [Definition]

class Definition:
    executable_definition: ExecutableDefinition

class ExecutableDefinition:
    operation_definition: OperationDefinition

class OperationDefinition:
    operation_type: string
    name: string
    selections: [Selection]

class Selection:
    field: Field

class Field:
    name: string
    arguments: [Argument]
    selections: [Selection]

class Argument:
    name: string

func _tokenize_name(reader: StringReader) -> _Token:
    name = ""

    while True:
        ch = reader.get()

        if ch.is_alpha() or ch.is_digit() or ch == '_':
            name += ch
        else:
            if ch != '':
                reader.unget()

            break

    return _Name(name)

func _tokenize_number(reader: StringReader) -> _Token:
    value = ""

    while True:
        ch = reader.get()

        if ch.is_digit():
            value += ch
        else:
            if ch != '':
                reader.unget()

            break

    return _IntValue(value)

func _tokenize_dots(reader: StringReader) -> _Token:
    for _ in range(3):
        ch = reader.get()

        if ch != '.':
            raise GraphqlError("No '.'.")

    return _Dots()

func _tokenize_string(reader: StringReader) -> _Token:
    value = ""

    while True:
        ch = reader.get()

        if ch == '\"':
            break
        elif ch == '':
            raise GraphqlError("No end of string.")
        else:
            value += ch

    return _StringValue(value)

func _tokenize(document: string) -> _Tokens:
    reader = StringReader(document)
    token: _Token = None
    tokens: [_Token] = []

    while True:
        ch = reader.get()

        if ch in ",\t\r\n ":
            continue
        elif ch in "!$&():=@[]{|}":
            token = _Punctuator(ch)
        elif ch == '.':
            reader.unget()
            token = _tokenize_dots(reader)
        elif ch == '-' or ch.is_digit():
            reader.unget()
            token = _tokenize_number(reader)
        elif ch == '\"':
            token = _tokenize_string(reader)
        elif ch.is_alpha() or ch == '_':
            reader.unget()
            token = _tokenize_name(reader)
        elif ch == '':
            break
        else:
            raise GraphqlError(f"Invalid character '{ch}'")

        tokens.append(token)

    # tokens.append(_End())

    return _Tokens(tokens)

func _parse_arguments(tokens: _Tokens) -> [Argument]:
    match tokens.peek():
        case _Punctuator(value='('):
            pass
        case _:
            return None

    tokens.get()
    arguments = []

    while True:
        match tokens.get():
            case _Name() as name_token:
                arguments.append(Argument(name_token.value))

                match tokens.get():
                    case _Punctuator(value=':'):
                        pass
                    case _:
                        raise GraphqlError("No :.")

                tokens.get()
            case _Punctuator(value=')'):
                break
            case _:
                raise GraphqlError("No ).")

    return arguments

func _parse_name(tokens: _Tokens) -> string:
    match tokens.get():
        case _Name() as name_token:
            return name_token.value
        case _:
            tokens.unget()

            return None

func _parse_field(tokens: _Tokens) -> Field:
    name = _parse_name(tokens)

    if name is None:
        return None

    arguments = _parse_arguments(tokens)
    selections = _parse_selection_set(tokens)

    return Field(name, arguments, selections)

func _parse_selection(tokens: _Tokens) -> Selection:
    field = _parse_field(tokens)

    if field is None:
        return None

    return Selection(field)

func _parse_selection_set(tokens: _Tokens) -> [Selection]:
    selections: [Selection] = []

    match tokens.peek():
        case _Punctuator(value='{'):
            pass
        case _:
            return None

    tokens.get()

    while True:
        match tokens.peek():
            case _Punctuator(value='}'):
                break

        selection = _parse_selection(tokens)

        if selection is None:
            return None

        selections.append(selection)

    tokens.get()

    return selections

func _parse_operation_type(tokens: _Tokens) -> string:
    operation_type = _parse_name(tokens)

    if operation_type is None:
        return None

    if operation_type not in ["query", "mutation", "subscription"]:
        raise GraphqlError(f"Bad operation '{operation_type}'.")

    return operation_type

func _parse_operation_definition(tokens: _Tokens) -> OperationDefinition:
    operation_type = _parse_operation_type(tokens)

    if operation_type is None:
        name: string = None
    else:
        name = _parse_name(tokens)

    selections = _parse_selection_set(tokens)

    if selections is None:
        return None

    return OperationDefinition(operation_type, name, selections)

func _parse_executable_definition(tokens: _Tokens) -> ExecutableDefinition:
    operation_definition = _parse_operation_definition(tokens)

    if operation_definition is None:
        return None

    return ExecutableDefinition(operation_definition)

func _parse_definition(tokens: _Tokens) -> Definition:
    executable_definition = _parse_executable_definition(tokens)

    if executable_definition is None:
        return None

    return Definition(executable_definition)

func _parse_document(tokens: _Tokens) -> Document:
    document = Document([])

    while tokens.available():
        definition = _parse_definition(tokens)

        if definition is None:
            raise GraphqlError("Bad definition.")

        document.definitions.append(definition)

    return document

func parse(document: string) -> Document:
    """Parse given document.

    """

    tokens = _tokenize(document)

    return _parse_document(tokens)

@test
func test_parse_query():
    document = parse("\t\r"
                     "{\n"
                     "  foo(id: 10, name: \"kalle\") {\n"
                     "    id\n"
                     "    name\n"
                     "    value\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    selection = selections[0]
    assert selection.field.name == "foo"
    arguments = selection.field.arguments
    assert len(arguments) == 2
    assert arguments[0].name == "id"
    assert arguments[1].name == "name"
    selections = selection.field.selections
    assert len(selections) == 3
    assert selections[0].field.name == "id"
    assert selections[0].field.arguments is None
    assert selections[0].field.selections is None
    assert selections[1].field.name == "name"
    assert selections[1].field.arguments is None
    assert selections[1].field.selections is None
    assert selections[2].field.name == "value"
    assert selections[2].field.arguments is None
    assert selections[2].field.selections is None

@test
func test_spacex():
    document = parse("{"
                     "  launchesPast(limit: 10) {"
                     "    mission_name"
                     "    launch_date_local"
                     "    launch_site {"
                     "      site_name_long"
                     "    }"
                     "    ships {"
                     "      name"
                     "      home_port"
                     "      image"
                     "    }"
                     "  }"
                     "}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    assert selections[0].field.name == "launchesPast"
    selections = selections[0].field.selections
    assert selections[0].field.name == "mission_name"
    assert selections[1].field.name == "launch_date_local"
    assert selections[2].field.name == "launch_site"
    assert selections[2].field.selections[0].field.name == "site_name_long"
    assert selections[3].field.name == "ships"
    assert selections[3].field.selections[0].field.name == "name"
    assert selections[3].field.selections[1].field.name == "home_port"
    assert selections[3].field.selections[2].field.name == "image"

@test
func test_bad_definition():
    try:
        parse("{{name}}")
        assert False
    except GraphqlError as error:
        assert error.message == "Bad definition."

    try:
        parse("{")
        assert False
    except GraphqlError as error:
        assert error.message == "Out of tokens."

@test
func test_name():
    document = parse("{foo_2}")
    assert len(document.definitions) == 1
    selections = (document
                  .definitions[0]
                  .executable_definition
                  .operation_definition
                  .selections)
    assert len(selections) == 1
    assert selections[0].field.name == "foo_2"

@test
func test_introspection_query():
    return
    parse("query IntrospectionQuery {\n"
          "  __schema {\n"
          "    queryType { name }\n"
          "    mutationType { name }\n"
          "    subscriptionType { name }\n"
          "    types {\n"
          "      ...FullType\n"
          "    }\n"
          "    directives {\n"
          "      name\n"
          "      description\n"
          "      locations\n"
          "      args {\n"
          "        ...InputValue\n"
          "      }\n"
          "    }\n"
          "  }\n"
          "}\n"
          "fragment FullType on __Type {\n"
          "  kind\n"
          "  name\n"
          "  description\n"
          "  fields(includeDeprecated: true) {\n"
          "    name\n"
          "    description\n"
          "    args {\n"
          "      ...InputValue\n"
          "    }\n"
          "    type {\n"
          "      ...TypeRef\n"
          "    }\n"
          "    isDeprecated\n"
          "    deprecationReason\n"
          "  }\n"
          "  inputFields {\n"
          "    ...InputValue\n"
          "  }\n"
          "  interfaces {\n"
          "    ...TypeRef\n"
          "  }\n"
          "  enumValues(includeDeprecated: true) {\n"
          "    name\n"
          "    description\n"
          "    isDeprecated\n"
          "    deprecationReason\n"
          "  }\n"
          "  possibleTypes {\n"
          "    ...TypeRef\n"
          "  }\n"
          "}\n"
          "fragment InputValue on __InputValue {\n"
          "  name\n"
          "  description\n"
          "  type { ...TypeRef }\n"
          "  defaultValue\n"
          "}\n"
          "fragment TypeRef on __Type {\n"
          "  kind\n"
          "  name\n"
          "  ofType {\n"
          "    kind\n"
          "    name\n"
          "    ofType {\n"
          "      kind\n"
          "      name\n"
          "      ofType {\n"
          "        kind\n"
          "        name\n"
          "        ofType {\n"
          "          kind\n"
          "          name\n"
          "          ofType {\n"
          "            kind\n"
          "            name\n"
          "            ofType {\n"
          "              kind\n"
          "              name\n"
          "              ofType {\n"
          "                kind\n"
          "                name\n"
          "              }\n"
          "            }\n"
          "          }\n"
          "        }\n"
          "      }\n"
          "    }\n"
          "  }\n"
          "}")

@test
func test_operation_type():
    document = parse("query {\n"
                     "  packages {\n"
                     "    name\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert operation_definition.operation_type == "query"
    assert operation_definition.name is None

@test
func test_operation_type_with_name():
    document = parse("query MyQuery {\n"
                     "  packages {\n"
                     "    name\n"
                     "  }\n"
                     "}")
    assert len(document.definitions) == 1
    operation_definition = (document
                            .definitions[0]
                            .executable_definition
                            .operation_definition)
    assert operation_definition.operation_type == "query"
    assert operation_definition.name == "MyQuery"
